#!/usr/bin/env python3

from sys import argv, stdin
from json import load, dump, dumps
from os import path
from hashlib import md5

from requests import request


CACHE = "cache.json"
MAXIMUM = 2 ** 8 - 1


def main(identity, nonce, _stdin):
  endpoint = "https://www.duolingo.com/2017-06-30/users/" + identity

  lines = iter(_stdin)
  next(lines)
  headers = dict(map(lambda header: header.strip().split(": ", 1), lines))
  del headers['Content-Length']

  with Cache(CACHE, headers) as cache:
    course = cache\
      .get(endpoint, params = dict(fields = 'currentCourse', _ = nonce))\
        ['currentCourse']
    tracking = course['trackingProperties']
    for section in course['pathSectioned'][:-1]:
      for index, unit in enumerate(section['units']):
        lexemes = cache.post(
          "/".join([
            endpoint,
            'courses',
            tracking['learning_language'],
            tracking['ui_language'],
            'learned-lexemes'
          ]),
          json = dict(progressedSkills = [dict(
            finishedLevels = MAXIMUM,
            finishedSessions = MAXIMUM,
            skillId = dict(id = next(filter(
              lambda skill: skill,
              map(
                lambda level: level['pathLevelMetadata'].get('skillId'),
                unit['levels']
              )
            )))
          )])
        )
        for lexeme in lexemes['learnedLexemes']: print(lexeme['text'])

class Cache:
  def __init__(self, _path, headers):
    self.path = _path
    self.headers = headers

  def __enter__(self):
    if path.exists(self.path):
      with open(self.path) as file:
        self.cache = load(file)
    else:
      self.cache = dict()
    return self

  def __exit__(self, *extra):
    with open(self.path, "w") as file:
      dump(self.cache, file)

  def request(self, method, URL, **keywords):
    hashSum = md5(
      dumps(dict(method = method, URL = URL, **keywords), sort_keys = True)
        .encode()
    ).hexdigest()
    if hashSum in self.cache:
      response = self.cache[hashSum]
    else:
      r = request(method, URL, headers = self.headers, **keywords)
      print(r)
      response \
        = r.json()
      self.cache[hashSum] = response
    return response

  def get(self, URL, **keywords): return self.request('GET', URL, **keywords)

  def post(self, URL, **keywords): return self.request('POST', URL, **keywords)


if __name__ == '__main__': main(*argv[1:], stdin)
